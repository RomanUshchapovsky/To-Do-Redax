{"ast":null,"code":"import _regeneratorRuntime from \"/home/usersmart/Desktop/ToDo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchAllTodos),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchTodoById),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(todosWatcher);\n\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { actionTypes } from '../constants';\nimport { api } from '../../api';\nvar Api = api.instance();\n\nfunction fetchAllTodos(_ref) {\n  var callback, URL, todos;\n  return _regeneratorRuntime.wrap(function fetchAllTodos$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          callback = _ref.callback;\n          _context.prev = 1;\n          URL = \"\";\n          _context.next = 5;\n          return call(function () {\n            return Api.get(URL);\n          });\n\n        case 5:\n          todos = _context.sent;\n          _context.next = 8;\n          return put(actionTypes.FETCH_TODOS_FAILURE, todos);\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put(actionTypes.FETCH_TODOS_FAILURE, _context.t0);\n\n        case 14:\n          _context.prev = 14;\n          callback && typeof callback === 'function', callback();\n          return _context.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10, 14, 17]]);\n}\n\nfunction fetchTodoById(_ref2) {\n  var payload, callback, URL, todo;\n  return _regeneratorRuntime.wrap(function fetchTodoById$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload, callback = _ref2.callback;\n          _context2.prev = 1;\n          URL = \"sdgsdfsdf/\".concat(payload.id);\n          _context2.next = 5;\n          return call(function () {\n            return Api.get(URL);\n          });\n\n        case 5:\n          todo = _context2.sent;\n          _context2.next = 8;\n          return put(actionTypes.FETCH_TODO_FAILURE, todo);\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 14;\n          return put(actionTypes.FETCH_TODO_FAILURE, _context2.t0);\n\n        case 14:\n          _context2.prev = 14;\n          callback && typeof callback === 'function', callback();\n          return _context2.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 10, 14, 17]]);\n}\n\nexport default function todosWatcher() {\n  return _regeneratorRuntime.wrap(function todosWatcher$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(actionTypes.FETCH_TODOS_REQUEST, fetchAllTodos);\n\n        case 2:\n          _context3.next = 4;\n          return takeLatest(actionTypes.FETCH_TODO_REQUEST, fetchTodoById);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/usersmart/Desktop/ToDo/src/containers/store/sagas.js"],"names":["fetchAllTodos","fetchTodoById","todosWatcher","call","put","takeLatest","actionTypes","api","Api","instance","callback","URL","get","todos","FETCH_TODOS_FAILURE","payload","id","todo","FETCH_TODO_FAILURE","FETCH_TODOS_REQUEST","FETCH_TODO_REQUEST"],"mappings":";;oDAMUA,a;qDAYAC,a;qDAYeC,Y;;AA9BzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,GAAT,QAAoB,WAApB;AAEA,IAAMC,GAAG,GAAGD,GAAG,CAACE,QAAJ,EAAZ;;AAEA,SAAUT,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BU,UAAAA,QAA1B,QAA0BA,QAA1B;AAAA;AAEcC,UAAAA,GAFd,GAEoB,EAFpB;AAAA;AAGsB,iBAAMR,IAAI,CAAC;AAAA,mBAAMK,GAAG,CAACI,GAAJ,CAAQD,GAAR,CAAN;AAAA,WAAD,CAAV;;AAHtB;AAGcE,UAAAA,KAHd;AAAA;AAIQ,iBAAMT,GAAG,CAACE,WAAW,CAACQ,mBAAb,EAAkCD,KAAlC,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMT,GAAG,CAACE,WAAW,CAACQ,mBAAb,cAAT;;AANR;AAAA;AAQQJ,UAAAA,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAAhC,EAA4CA,QAAQ,EAApD;AARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUT,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0Bc,UAAAA,OAA1B,SAA0BA,OAA1B,EAAmCL,QAAnC,SAAmCA,QAAnC;AAAA;AAEcC,UAAAA,GAFd,uBAEiCI,OAAO,CAACC,EAFzC;AAAA;AAGqB,iBAAMb,IAAI,CAAC;AAAA,mBAAMK,GAAG,CAACI,GAAJ,CAAQD,GAAR,CAAN;AAAA,WAAD,CAAV;;AAHrB;AAGcM,UAAAA,IAHd;AAAA;AAIQ,iBAAMb,GAAG,CAACE,WAAW,CAACY,kBAAb,EAAiCD,IAAjC,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMb,GAAG,CAACE,WAAW,CAACY,kBAAb,eAAT;;AANR;AAAA;AAQQR,UAAAA,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAAhC,EAA4CA,QAAQ,EAApD;AARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,eAAe,SAAUR,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,UAAU,CAAEC,WAAW,CAACa,mBAAd,EAAmCnB,aAAnC,CAAhB;;AADW;AAAA;AAEX,iBAAMK,UAAU,CAAEC,WAAW,CAACc,kBAAd,EAAkCnB,aAAlC,CAAhB;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { actionTypes } from '../constants';\nimport { api } from '../../api';\n\nconst Api = api.instance();\n\nfunction* fetchAllTodos({ callback }) {\n    try {\n        const URL = \"\"\n        const todos = yield call(() => Api.get(URL));\n        yield put(actionTypes.FETCH_TODOS_FAILURE, todos);\n    } catch (err) {\n        yield put(actionTypes.FETCH_TODOS_FAILURE, err)\n    } finally {\n        callback && typeof callback === 'function', callback()\n    }\n}\n\nfunction* fetchTodoById({ payload, callback }) {\n    try {\n        const URL = `sdgsdfsdf/${payload.id}`\n        const todo = yield call(() => Api.get(URL));\n        yield put(actionTypes.FETCH_TODO_FAILURE, todo);\n    } catch (err) {\n        yield put(actionTypes.FETCH_TODO_FAILURE, err)\n    } finally {\n        callback && typeof callback === 'function', callback()\n    }\n}\n\nexport default function* todosWatcher() {\n    yield takeLatest (actionTypes.FETCH_TODOS_REQUEST, fetchAllTodos)\n    yield takeLatest (actionTypes.FETCH_TODO_REQUEST, fetchTodoById)\n}"]},"metadata":{},"sourceType":"module"}